#!/usr/bin/perl

use warnings;
use strict;

use APNIC::RPKI::CA;
use APNIC::RPKI::RSC;
use APNIC::RPKI::Validator;

use Cwd;
use File::Slurp qw(read_file);
use Getopt::Long;
use List::MoreUtils qw(uniq);
use Net::CIDR::Set;
use Set::IntSpan;

sub usage
{
    print <<EOF;
Usage:
$0 --ca-name {ca-name} --ca-cert-path {ca-cert-path}
    --path {path1} [--path {path2} ...]
    --path-unnamed {path1} [--path-unnamed {path2} ...]
    --in {path}

Verify an RSC object.  The names of the trusted root CAs are provided
as arguments to the --ca-name option.  Trusted root CA certificate
(PEM format) paths may also be provided as arguments to the
--ca-cert-path option.
EOF

    exit(10);
}

my %options;
GetOptions(\%options, 'ca-name=s@', 'ca-cert-path=s@', 'path=s@',
           'path-unnamed=s@', 'in=s');
if (not @{$options{'ca-name'} || []}
        and not @{$options{'ca-cert-path'} || []}) {
    print "Please enter a CA name or a CA certificate path.\n";
    usage();
}
if (not @{$options{'path'} || []}
        and not @{$options{'path-unnamed'} || []}) {
    print "Please enter a content path.\n";
    usage();
}
if (not $options{'in'}) {
    print "Please enter an input path.\n";
    usage();
}

my ($ca_names, $ca_cert_paths, $paths_temp, $paths_unnamed_temp,
    $resources, $in) =
    @options{qw(ca-name ca-cert-path path path-unnamed resources in)};

my $cwd = cwd();

my @paths;
for my $path (@{$paths_temp}) {
    if ($path !~ /^\//) {
        $path = $cwd.'/'.$path;
    }
    push @paths, $path;
}

my @paths_unnamed;
for my $path_unnamed (@{$paths_unnamed_temp}) {
    if ($path_unnamed !~ /^\//) {
        $path_unnamed = $cwd.'/'.$path_unnamed;
    }
    push @paths_unnamed, $path_unnamed;
}

my @cas =
    map { my $path = $cwd."/data/cas/$_";
          APNIC::RPKI::CA->new(ca_path => $path) }
        @{$ca_names || []}; 

my $certs = [];
for my $ca (@cas) {
    if ($ca->get_issuer() ne $ca->get_subject()) {
        print "CA ".$ca->get_subject()." is not a root CA.\n";
        usage();
    }
    push @{$certs}, "-----BEGIN CERTIFICATE-----\n".
                    $ca->get_ca_pem()."\n".
                    "-----END CERTIFICATE-----";
}
for my $ca_cert_path (@{$ca_cert_paths || []}) {
    my $cert = read_file($ca_cert_path);
    chomp $cert;
    push @{$certs}, $cert;
}
$certs = [ uniq @{$certs} ];

if ($in !~ /^\//) {
    $in = $cwd.'/'.$in;
}
my $rsc_data = read_file($in);

my $validator = APNIC::RPKI::Validator->new();
my $res = eval {
    $validator->validate_rsc($rsc_data, $certs, \@paths,
                             \@paths_unnamed);
};
if (my $error = $@) {
    print "Verification failed: $error";
    exit(1);
} else {
    print "Verification succeeded.\n";
    exit(0);
}

1;
